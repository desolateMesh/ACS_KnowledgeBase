AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates an S3 bucket with KMS encryption for secure storage'

Parameters:
  BucketName:
    Type: String
    Description: 'Globally unique name for the S3 bucket'
    MinLength: 3
    MaxLength: 63
    AllowedPattern: '^[a-z0-9][a-z0-9.-]*$'
    ConstraintDescription: 'Bucket name must be between 3 and 63 characters, start with a lowercase letter or number, and contain only lowercase letters, numbers, periods, and hyphens.'

  EnableKeyRotation:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable automatic rotation of the KMS key annually'

  KeyAdministratorArn:
    Type: String
    Description: 'ARN of the IAM entity that will administer the KMS key'

  KeyUserArn:
    Type: String
    Description: 'ARN of the IAM entity that will use the KMS key'

  EnableVersioning:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable versioning on the S3 bucket'

  EnableAccessLogging:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable S3 access logging'

  LoggingBucketName:
    Type: String
    Description: 'Target bucket for access logs (required if EnableAccessLogging is true)'
    Default: ''

  LoggingPrefix:
    Type: String
    Description: 'Prefix for log objects within the logging bucket'
    Default: ''

  BlockPublicAccess:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable S3 Block Public Access settings'

  EnforceSSL:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enforce SSL/TLS for all bucket requests'

Conditions:
  ShouldEnableKeyRotation: !Equals [!Ref EnableKeyRotation, 'true']
  ShouldEnableVersioning: !Equals [!Ref EnableVersioning, 'true']
  ShouldEnableAccessLogging: !Equals [!Ref EnableAccessLogging, 'true']
  ShouldBlockPublicAccess: !Equals [!Ref BlockPublicAccess, 'true']
  ShouldEnforceSSL: !Equals [!Ref EnforceSSL, 'true']

Resources:
  # KMS Key for S3 Bucket Encryption
  S3BucketKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS key for S3 bucket encryption'
      EnableKeyRotation: !If [ShouldEnableKeyRotation, true, false]
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-policy-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Key Administrator
            Effect: Allow
            Principal:
              AWS: !Ref KeyAdministratorArn
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow Key Usage
            Effect: Allow
            Principal:
              AWS: !Ref KeyUserArn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Sid: Allow S3 Service to Use the Key
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:Decrypt'
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub 'S3-KMS-Key-${BucketName}'
        - Key: Purpose
          Value: 'S3 Encryption'

  # KMS Alias for easier key reference
  S3BucketKMSKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${BucketName}-key'
      TargetKeyId: !Ref S3BucketKMSKey

  # S3 Bucket with KMS Encryption
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: !If [ShouldEnableVersioning, 'Enabled', 'Suspended']
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt S3BucketKMSKey.Arn
            BucketKeyEnabled: true
      LoggingConfiguration: !If
        - ShouldEnableAccessLogging
        - DestinationBucketName: !Ref LoggingBucketName
          LogFilePrefix: !Ref LoggingPrefix
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration: !If
        - ShouldBlockPublicAccess
        - BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Ref BucketName
        - Key: Environment
          Value: !Ref 'AWS::StackName'
        - Key: Encryption
          Value: 'KMS'

  # S3 Bucket Policy to enforce HTTPS
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: ShouldEnforceSSL
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ForceSSLOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}'
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

Outputs:
  BucketName:
    Description: 'Name of the S3 bucket'
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  BucketARN:
    Description: 'ARN of the S3 bucket'
    Value: !GetAtt S3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BucketARN'

  KMSKeyID:
    Description: 'ID of the KMS key'
    Value: !Ref S3BucketKMSKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyID'

  KMSKeyARN:
    Description: 'ARN of the KMS key'
    Value: !GetAtt S3BucketKMSKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyARN'

  KMSKeyAlias:
    Description: 'Alias of the KMS key'
    Value: !Ref S3BucketKMSKeyAlias
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyAlias'
